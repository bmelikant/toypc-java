package vm;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.LinkedList;
import java.util.Queue;

// class KeyboardController: Define a keyboard controller for this machine
public class KeyboardController implements KeyListener {
	
	// interrupts
	private static final short KEYPRESS_INTERRUPT = 0x09;
	
	// constants
	private static final String vendorId = "ToyKeys 1.0";
	private static final short GET_REVISION  = 0x01;
	private static final short CLEAR_QUEUE   = 0x02;
	private static final short REMAP_CONTROL = 0x03;
	// private static final short REMAP_DATA    = 0x04;
	private static final short REQUEST_KEY   = 0x05;
	
	// member variables
	private Queue<Short> typedKeys;
	private ToyProcessor referenceMachine;
	private int controlRegister;
	private int dataRegisterLo, dataRegisterHi;
	
	// constructor method
	public KeyboardController (ToyProcessor ref, int ctrlReg, int dataRegLow, int dataRegHi) {
	
		// set up pointers to the registers
		typedKeys = new LinkedList<Short>();
		referenceMachine = ref;
		controlRegister = ctrlReg;
		dataRegisterLo = dataRegLow;
		dataRegisterHi = dataRegHi;
	}
	
	// keyTyped captures input data into the Key queue
	public void keyTyped (KeyEvent e) {
		
		// add the key typed to the queue
		if (e.getKeyChar() == '\n' || e.getKeyChar() == '\r')
			typedKeys.add ((short) 10);
		else
			typedKeys.add((short) e.getKeyChar());
		
		// fire a keypress interrupt
		referenceMachine.interrupt(KEYPRESS_INTERRUPT);
	}
	
	// public short getNextKey (): returns the next key from the queue
	public short getNextKey () {
		
		// return the next item from the queue!
		if (typedKeys.peek() == null)
			return 0xff;
		
		return typedKeys.remove();
	}
	
	// public void updateKeyboardController (): Run the controller
	public void updateKeyboardController () {
		
		// first check the status of the control register.
		int ctrlRegValue = referenceMachine.getMemory (controlRegister);
		
		// did someone request the revision string?
		if (ctrlRegValue == GET_REVISION) {
			
			// store the revision string into memory at the location
			// given in the data registers
			int regLo = referenceMachine.getMemory(dataRegisterLo);
			int regHi = referenceMachine.getMemory(dataRegisterHi);
			
			int storageLoc = (regHi << 8) | regLo;
			
			for (int i = storageLoc; i < vendorId.length(); i++)
				referenceMachine.storeMemory((short) vendorId.charAt(i), i);
			
			// store a successful result at the location
			referenceMachine.storeMemory((short) 0xfe, dataRegisterLo);
		}
		
		// did someone request to clear the key queue?
		else if (ctrlRegValue == CLEAR_QUEUE) {
			
			// just clear the key queue
			typedKeys.clear();
		}
		
		// did someone request to remap the control register?
		else if (ctrlRegValue == REMAP_CONTROL) {
			
			// set the control register equal to the value
			// in the data register
			controlRegister = referenceMachine.getMemory ((short) ((dataRegisterHi << 8)|dataRegisterLo));
		}
		
		// did someone request to remap the data register?
		else if (ctrlRegValue == REQUEST_KEY) {
			
			// the key value goes in the low data register
			if (typedKeys.peek() == null)
				referenceMachine.storeMemory ((short) 0xff, dataRegisterLo);
			else
				referenceMachine.storeMemory (typedKeys.remove(), dataRegisterLo);
		}
	}
	
	// unused KeyListener methods
	public void keyPressed  (KeyEvent e) {}
	public void keyReleased (KeyEvent e) {}
}
