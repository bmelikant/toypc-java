import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StreamTokenizer;
import java.util.ArrayList;

// class ToyAssembler: Define an interface to the assembler for the Toy Virtual Machine
public class ToyAssembler {
	
	// main method for the ToyAssembler
	public static void main (String [] args) {
		
		String inputName = "", outputName = "default.txe", listName = "";
		
		// read the command line arguments and set up the session variables
		if (args.length < 1) {
			
			System.out.println ("Error: no input file specified!");
			System.exit (-1);
		}
		
		// input name is always the first argument
		inputName = args[0];
		listName = inputName + ".lst";
		
		// other arguments are ignored for now
		Assembler myAssembler = new Assembler (inputName, outputName, listName, "Toy Assembler v1.0");
		
		// if the build failed display an error result
		if (myAssembler.assemble() == false) {
			
			myAssembler.displayAssemblyErrors ();
			System.out.println ("Build failed!");
			System.exit (-1);
		}
		
		// otherwise dump a succeeded result
		myAssembler.displayAssemblyInformation ();
		System.out.println ("Build succeeded!");
		System.exit (0);
	}
}

// class Assembler: define an Assembler for the Toy Virtual Machine
class Assembler {
	
	// constructor
	public Assembler (String srcFile, String destFile, String lstFile, String version) {
	}
	
	// public boolean assemble (): Assemble the associated source file
	public boolean assemble () {

		// call firstPass () to generate a symbol table to pass to secondPass ()
		return false;
	}

	// public void displayAssemblyErrors (): Print out the assembly errors
	public void displayAssemblyErrors () {
	}
	
	// public void displayAssemblyInformation (): Print out the assembly information
	public void displayAssemblyInformation () {
	}
}

// class LabelParser: define a parser that will generate a list file/symbol table
class LabelParser {
	
	// member variables
	String errorList;
	boolean errorFlag;
	File listingFile;
	LexicalAnalyzer labelAnalyzer;
	SymbolTable codeSymbols;
	
	// constructor
	public LabelParser (String srcFile, String listFile) {
		
		listingFile = new File (listFile);
		labelAnalyzer = new LexicalAnalyzer (new File (srcFile));
		errorFlag = false;
		errorList = "";
	}
	
	// public boolean generateSymbolTable (): generate a symbol table from the given code
	public boolean generateSymbolTable () {
		
		// run lexical analyzer and process the results
		String analysis = labelAnalyzer.analyzeNextLine();
		
		while (!analysis.equals ("EOF")) {
			
			// now parse the line
			String [] tokens = analysis.split (" ");
			int tokenIndex = 0;
			
			// see if the first argument is a label
			if (tokens[tokenIndex].startsWith ("Label=")) {
				
			}
			
			// see if the first (or possibly second) argument is an opcode
			if (tokens[tokenIndex].startsWith("OneByteOpcode=") || tokens[tokenIndex].startsWith("TwoByteOpcode=")) {
				
			}
			
			// see if the first or second argument is a directive
			else if (tokens[tokenIndex].startsWith("Directive=")) {
				
			}
			
			// see if the first or second argument is EOL or EOF
			else if (tokens[tokenIndex].equals ("EOL"))
				analysis = labelAnalyzer.analyzeNextLine ();
			
			// if the next argument is EOF we have to exit this loop!
			else if (tokens[tokenIndex].equals("EOF"))
				break;
			
			// otherwise we have a problem!
			else {
				
				errorFlag = true;
				errorList += "Error (Line " + labelAnalyzer.getCurrentLine () + "): " + labelAnalyzer.getCurrentLineContents() + "\n"
						+ "Invalid combination of opcode and operands\n\n";
			}
		}
		
		return errorFlag;
	}
}

// class LexicalAnalyzer: define a lexical analyzer for the Toy Virtual Machine
class LexicalAnalyzer {
	
	// lookup lists
	public static final String [] oneByteOps = { "nop", "hlt" };
	public static final String [] twoByteOps = { };
	public static final String [] directives = { "db", "dd", "resb", "resw" };
	public static final String [] registers  = { "a", "b", "c", "x", "y" };
	
	public static final short [] oneByteOpNums = { 0x00, 0x10 };
	public static final short [] twoByteOpNums = { };
	
	// input file and analyzer
	File inputFile;
	StreamTokenizer analyzer;
	String currentLineContents;
	
	public LexicalAnalyzer (File toTokenize) {
		
		// set up this analyzer
		inputFile = toTokenize;
		resetAnalzyer ();
	}
	
	// public void resetAnalyzer (): Setup this analzyer for use. Called first time from constructor
	public void resetAnalzyer () {
		
		// try to initialize the analyzer
		try {
			
			analyzer = new StreamTokenizer (new InputStreamReader (new FileInputStream (inputFile)));
			
		} catch (Exception e) {
			
			System.out.println ("Error opening file: " + e.toString ());
			System.exit (0);
		}
		
		// now set up the tokens to parse
		analyzer.resetSyntax ();
		
		analyzer.commentChar (';');
		
		analyzer.wordChars ('A', 'Z');
		analyzer.wordChars ('a', 'z');
		analyzer.wordChars ('0', '9');
		analyzer.wordChars ('#', '#');
		analyzer.wordChars ('$', '$');
		
		analyzer.whitespaceChars (0x09, 0x012);
		analyzer.whitespaceChars (',', ',');
		
		analyzer.quoteChar ('"');
		analyzer.quoteChar ('\'');
		
		analyzer.lowerCaseMode (true);
		analyzer.eolIsSignificant (true);
	}
	
	// public String analyzeNextLine (): Analyze the next line and return it
	public String analyzeNextLine () {
		
		try {
			
			String analysis = "";
			currentLineContents = "";
			int tokenType = analyzer.nextToken ();
		
			// read tokens and add them to the analysis as long as there are tokens left
			while (tokenType != StreamTokenizer.TT_EOL && tokenType != StreamTokenizer.TT_EOF) {
			
				// try to parse a number from this token. If it works, return a number.
				// If not, return a word. If it starts with 0x it is a hex number
				String token = analyzer.sval;
				
				// check for number first. Numbers delimited by '#'
				if (token.startsWith ("#")) {
					
					// see if it's a hex number
					if (token.endsWith ("h"))
						analysis += "HexNumber=" + token.replace('#', ' ').replace('h', ' ').trim () + " ";
					else if (token.endsWith("b"))
						analysis += "BinaryNumber=" + token.replace('#', ' ').replace('b', ' ').trim () + " ";
					else
						analysis += "DecimalNumber=" + token.replace('#', ' ').trim () + " ";
				}
			
				// check for memory reference delimited by '$'
				else if (token.startsWith("$"))
					analysis += "MemoryReference=" + token.replace('$', ' ').trim();
				
				// check to see if this argument is a register
				else if (isRegister (token))
					analysis += "Register=" + token + " ";
				
				// check to see if this is a one-byte opcode
				else if (isOneByteOpcode (token))
					analysis += "OneByteOpcode=" + token + " ";
				
				// check to see if this is a two-byte opcode
				else if (isTwoByteOpcode (token))
					analysis += "TwoByteOpcode=" + token + " ";
				
				// check to see if this is a directive
				else if (isDirective (token))
					analysis += "Directive=" + token + " ";
				
				// otherwise, it's a label!
				else
					analysis += "Label=" + token + " ";
				
				currentLineContents += token + " ";
			}
			
			if (tokenType == StreamTokenizer.TT_EOL)
				analysis += "EOL";
			
			else if (tokenType == StreamTokenizer.TT_EOF)
				analysis += "EOF";
			
			return analysis;
			
		} catch (IOException e) {
		
			System.out.println ("IO Error reading analysis file: " + e.toString());
			return "";
		}
	}
	
	// public int getCurrentLine (): return current line
	public int getCurrentLine () { return analyzer.lineno(); }
	public String getCurrentLineContents () { return currentLineContents; }
	
	// public boolean isRegister (String argument): See if this argument matches a register
	public boolean isRegister (String argument) {
		
		for (int i = 0; i < registers.length; i++) {
			
			if (argument.equals (registers[i]))
				return true;
		}
		
		return false;
	}
	
	// public boolean isOneByteOpcode (String argument): See if this argument matches a one byte opcode
	public boolean isOneByteOpcode (String argument) {
		
		for (int i = 0; i < oneByteOps.length; i++) {
			
			if (argument.equals (oneByteOps[i]))
				return true;
		}
		
		return false;
	}
	
	// public boolean isTwoByteOpcode (String argument): See if this argument matches a two byte opcode
	public boolean isTwoByteOpcode (String argument) {
		
		for (int i = 0; i < twoByteOps.length; i++) {
			
			if (argument.equals (twoByteOps[i]))
				return true;
		}
		
		return false;
	}
	
	// public boolean isDirective (String argument): See if this argument matches a directive
	public boolean isDirective (String argument) {
		
		for (int i = 0; i < directives.length; i++) {
			
			if (argument.equals (directives[i]))
				return true;
		}
		
		return false;
	}
}

// class SymbolTable: Define a symbol table
class SymbolTable {

	// member variables
	private ArrayList<SymbolTableEntry> symTable;
	
	// constructor method
	public SymbolTable () {
		
		// create the symbol table
		symTable = new ArrayList<SymbolTableEntry>();
	}
	
	// public boolean addSymbol (): Add a symbol to the table
	public boolean addSymbol (String symbol, int addr) {
		
		for (int i = 0; i < symTable.size(); i++) {
			
			if (symTable.get(i).entryName.equals(symbol))
				return true;
		}
		
		symTable.add (new SymbolTableEntry (symbol, addr, true));
		return false;
	}
}

// class SymbolTableEntry: define a symbol table entry
class SymbolTableEntry {
	
	public SymbolTableEntry (String name, int address, boolean found) {
		
		entryName = name;
		addr = address;
		refFound = found;
	}
	
	// all members are public
	public String  entryName;
	public int     addr;
	public boolean refFound;
}