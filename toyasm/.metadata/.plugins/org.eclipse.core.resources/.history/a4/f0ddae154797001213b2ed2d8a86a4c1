package vm;
import java.io.File;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.ShortBuffer;
import java.nio.channels.FileChannel;

public class DiskController {

	// control register one commands
	private static final short GET_REVISION      = 0x01;
	private static final short READ_DISK_SECTOR  = 0x05;
	private static final short WRITE_DISK_SECTOR = 0x06;
	
	// vendor ID
	private static final String vendorID = "ToyDisk 2.0";
	
	private ToyProcessor refMachine;
	private int ctrlReg;
	private int dataRegOneLo, dataRegOneHi, dataRegTwoLo, dataRegTwoHi;
	private File diskFile;
	
	public DiskController (int regStart) {
		
		// we are going to set up the memory references
		// that are the control registers
		ctrlReg = regStart;
		
		dataRegOneLo = regStart + 1;
		dataRegOneHi = regStart + 2;
		dataRegTwoLo = regStart + 3;
		dataRegTwoHi = regStart + 4;
	}
	
	// public void setupRegisters (int startReg): Reset this controller's registers
	public void setupRegisters (int regStart) {
		
		// we are going to set up the memory references
		// that are the control registers
		ctrlReg = regStart;
				
		dataRegOneLo = regStart + 1;
		dataRegOneHi = regStart + 2;
		dataRegTwoLo = regStart + 3;
		dataRegTwoHi = regStart + 4;
	}
	
	// public void setRefMachine () Setup the reference machine for this controller
	public void setRefMachine (ToyProcessor ref) { refMachine = ref; }
	public void setDiskFile (File toSet) { diskFile = toSet; }
	
	// public void storeDiskSector (): Store a 512-byte sector to the disk
	public void storeDiskSector (int number, short [] data) {
		
		// ensure that the data will fit into one sector (512 'bytes')
		if (data.length != 512) {
					
			System.out.println ("Data too large for sector, returning...");
			return;
		}
				
		// next thing, set up the byte channels for output
		ByteBuffer out = ByteBuffer.allocate(data.length*2);
		ShortBuffer outdata = out.asShortBuffer();
				
		outdata.put (data);
				
		try {
					
			FileChannel diskOut = (new RandomAccessFile (diskFile, "rw")).getChannel();
					
			while (out.hasRemaining())
				diskOut.write (out);
					
			diskOut.close ();
					
		} catch (Exception e) {
					
			System.out.println ("Error writing sector block: " + e.toString());
			e.printStackTrace();
		}
	}
	
	// public short [] readDiskSector (int number): Read a 512-byte sector from the disk
	public short [] readDiskSector (int number) {
		
		short [] sectorContents = new short [512];
		ByteBuffer receiverBuf = ByteBuffer.allocate (1024);
		ShortBuffer contentsBuf = receiverBuf.asShortBuffer();
		
		try {
			
			RandomAccessFile dskFile = new RandomAccessFile (diskFile, "r");
			FileChannel sectorIn = dskFile.getChannel();
			
			sectorIn.position(number*512);
			sectorIn.read (receiverBuf);
			
			contentsBuf.rewind ();
			int i = 0;
			
			while (contentsBuf.hasRemaining()) {
				
				sectorContents[i++] = contentsBuf.get ();
			}
			
		} catch (Exception e) {
			
			System.out.println ("Error reading sector: " + e.toString ());
			e.printStackTrace();
			return null;
		}
		
		return sectorContents;
	}
	
	// public void updateController (): run the controller's update code
	public void updateController () {
		
		int ctrlByte = refMachine.getMemory (ctrlReg);
		
		// sort out the meaning of the control byte
		processControlByte (ctrlByte);
		
		// now reset the byte
		refMachine.storeMemory ((short) 0x00, ctrlReg);
	}
	
	// public void processControlByte (): Process the current control register
	public void processControlByte (int ctrlByte) {
		
		int loc = 0;
		
		// process the byte
		switch (ctrlByte) {
		
		case GET_REVISION:
			
			// the revision string goes into machine memory at
			// the address in data register one
			loc = (refMachine.getMemory(dataRegOneHi) << 8 | refMachine.getMemory(dataRegOneLo));
			for (int i = 0; i < vendorID.length(); i++)
				refMachine.storeMemory ((short) vendorID.charAt(i), loc+i);
			
			break;
			
		case READ_DISK_SECTOR:
			
			// first get the location of the data in memory
			// and the sector value to read
			int startAddr = (refMachine.getMemory (dataRegOneHi) << 8 | refMachine.getMemory (dataRegOneLo));
			int sector = (refMachine.getMemory (dataRegTwoHi) << 8 | refMachine.getMemory (dataRegTwoLo));
			
			short [] sectorData = readDiskSector (sector);
			
			// now that we have the sector transfer it's contents into memory
			for (int i = 0; i < sectorData.length; i++)
				refMachine.storeMemory (sectorData[i], startAddr+i);
			
			break;
			
		case WRITE_DISK_SECTOR:
			
			// first get the sector number to write and the
			// buffer in memory
			int startAddrWrite = (refMachine.getMemory (dataRegOneHi) << 8 | refMachine.getMemory (dataRegOneLo));
			int sectorWrite = (refMachine.getMemory (dataRegTwoHi) << 8 | refMachine.getMemory (dataRegTwoLo));
			
			// now we have the two items we need, read in the data block from the
			// machine instance
			short [] sectorDataWrite = new short [512];
			
			for (int i = 0; i < sectorDataWrite.length; i++)
				sectorDataWrite[i] = refMachine.getMemory (startAddrWrite+i);
			
			// now we have the sector; write it to the disk
			storeDiskSector (sectorWrite, sectorDataWrite);
			
			break;
		}
	}
}